// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nlp.proto

package nlp

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeywordRequest_MethodType int32

const (
	KeywordRequest_TFIDF    KeywordRequest_MethodType = 0
	KeywordRequest_TextRank KeywordRequest_MethodType = 1
)

var KeywordRequest_MethodType_name = map[int32]string{
	0: "TFIDF",
	1: "TextRank",
}

var KeywordRequest_MethodType_value = map[string]int32{
	"TFIDF":    0,
	"TextRank": 1,
}

func (x KeywordRequest_MethodType) String() string {
	return proto.EnumName(KeywordRequest_MethodType_name, int32(x))
}

func (KeywordRequest_MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ebd3cd177a18baf, []int{0, 0}
}

type KeywordRequest struct {
	Method               KeywordRequest_MethodType `protobuf:"varint,1,opt,name=method,proto3,enum=nlp.KeywordRequest_MethodType" json:"method,omitempty"`
	Sentence             string                    `protobuf:"bytes,2,opt,name=sentence,proto3" json:"sentence,omitempty"`
	TopK                 int64                     `protobuf:"varint,3,opt,name=topK,proto3" json:"topK,omitempty"`
	AllowPOS             []string                  `protobuf:"bytes,4,rep,name=allowPOS,proto3" json:"allowPOS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *KeywordRequest) Reset()         { *m = KeywordRequest{} }
func (m *KeywordRequest) String() string { return proto.CompactTextString(m) }
func (*KeywordRequest) ProtoMessage()    {}
func (*KeywordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebd3cd177a18baf, []int{0}
}

func (m *KeywordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeywordRequest.Unmarshal(m, b)
}
func (m *KeywordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeywordRequest.Marshal(b, m, deterministic)
}
func (m *KeywordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordRequest.Merge(m, src)
}
func (m *KeywordRequest) XXX_Size() int {
	return xxx_messageInfo_KeywordRequest.Size(m)
}
func (m *KeywordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordRequest proto.InternalMessageInfo

func (m *KeywordRequest) GetMethod() KeywordRequest_MethodType {
	if m != nil {
		return m.Method
	}
	return KeywordRequest_TFIDF
}

func (m *KeywordRequest) GetSentence() string {
	if m != nil {
		return m.Sentence
	}
	return ""
}

func (m *KeywordRequest) GetTopK() int64 {
	if m != nil {
		return m.TopK
	}
	return 0
}

func (m *KeywordRequest) GetAllowPOS() []string {
	if m != nil {
		return m.AllowPOS
	}
	return nil
}

type KeywordResponse struct {
	Keywords             []*KeywordResponse_Keyword `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *KeywordResponse) Reset()         { *m = KeywordResponse{} }
func (m *KeywordResponse) String() string { return proto.CompactTextString(m) }
func (*KeywordResponse) ProtoMessage()    {}
func (*KeywordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebd3cd177a18baf, []int{1}
}

func (m *KeywordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeywordResponse.Unmarshal(m, b)
}
func (m *KeywordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeywordResponse.Marshal(b, m, deterministic)
}
func (m *KeywordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordResponse.Merge(m, src)
}
func (m *KeywordResponse) XXX_Size() int {
	return xxx_messageInfo_KeywordResponse.Size(m)
}
func (m *KeywordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordResponse proto.InternalMessageInfo

func (m *KeywordResponse) GetKeywords() []*KeywordResponse_Keyword {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type KeywordResponse_Keyword struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Weight               float64  `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Pos                  string   `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeywordResponse_Keyword) Reset()         { *m = KeywordResponse_Keyword{} }
func (m *KeywordResponse_Keyword) String() string { return proto.CompactTextString(m) }
func (*KeywordResponse_Keyword) ProtoMessage()    {}
func (*KeywordResponse_Keyword) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebd3cd177a18baf, []int{1, 0}
}

func (m *KeywordResponse_Keyword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeywordResponse_Keyword.Unmarshal(m, b)
}
func (m *KeywordResponse_Keyword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeywordResponse_Keyword.Marshal(b, m, deterministic)
}
func (m *KeywordResponse_Keyword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordResponse_Keyword.Merge(m, src)
}
func (m *KeywordResponse_Keyword) XXX_Size() int {
	return xxx_messageInfo_KeywordResponse_Keyword.Size(m)
}
func (m *KeywordResponse_Keyword) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordResponse_Keyword.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordResponse_Keyword proto.InternalMessageInfo

func (m *KeywordResponse_Keyword) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *KeywordResponse_Keyword) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *KeywordResponse_Keyword) GetPos() string {
	if m != nil {
		return m.Pos
	}
	return ""
}

func init() {
	proto.RegisterEnum("nlp.KeywordRequest_MethodType", KeywordRequest_MethodType_name, KeywordRequest_MethodType_value)
	proto.RegisterType((*KeywordRequest)(nil), "nlp.KeywordRequest")
	proto.RegisterType((*KeywordResponse)(nil), "nlp.KeywordResponse")
	proto.RegisterType((*KeywordResponse_Keyword)(nil), "nlp.KeywordResponse.Keyword")
}

func init() {
	proto.RegisterFile("nlp.proto", fileDescriptor_6ebd3cd177a18baf)
}

var fileDescriptor_6ebd3cd177a18baf = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4d, 0x4f, 0xfa, 0x40,
	0x10, 0xc6, 0xff, 0xfb, 0x5f, 0x44, 0x3a, 0x1a, 0x20, 0xe3, 0x4b, 0x1a, 0x62, 0x4c, 0x43, 0x62,
	0xd2, 0x13, 0x07, 0x4c, 0x8c, 0x07, 0x8f, 0x88, 0x31, 0xf8, 0x42, 0x16, 0xbe, 0x40, 0x85, 0x89,
	0x18, 0xca, 0xee, 0xda, 0x5d, 0x53, 0xf8, 0x08, 0xde, 0xfd, 0x36, 0x7e, 0x39, 0xb3, 0x4b, 0xad,
	0xc1, 0x70, 0xf1, 0xd4, 0x79, 0x26, 0xbf, 0x99, 0x3e, 0xcf, 0x2c, 0x04, 0x32, 0xd5, 0x1d, 0x9d,
	0x29, 0xab, 0x90, 0xcb, 0x54, 0xb7, 0x3f, 0x19, 0xd4, 0x07, 0xb4, 0xca, 0x55, 0x36, 0x15, 0xf4,
	0xfa, 0x46, 0xc6, 0xe2, 0x05, 0x54, 0x17, 0x64, 0x67, 0x6a, 0x1a, 0xb2, 0x88, 0xc5, 0xf5, 0xee,
	0x69, 0xc7, 0xcd, 0x6c, 0x42, 0x9d, 0x7b, 0x4f, 0x8c, 0x57, 0x9a, 0x44, 0x41, 0x63, 0x0b, 0x6a,
	0x86, 0xa4, 0x25, 0x39, 0xa1, 0xf0, 0x7f, 0xc4, 0xe2, 0x40, 0x94, 0x1a, 0x11, 0x2a, 0x56, 0xe9,
	0x41, 0xc8, 0x23, 0x16, 0x73, 0xe1, 0x6b, 0xc7, 0x27, 0x69, 0xaa, 0xf2, 0xe1, 0xe3, 0x28, 0xac,
	0x44, 0xdc, 0xf1, 0xdf, 0xba, 0x7d, 0x06, 0xf0, 0xf3, 0x07, 0x0c, 0x60, 0x67, 0xdc, 0xbf, 0xed,
	0xf5, 0x9b, 0xff, 0x70, 0x1f, 0x6a, 0x63, 0x5a, 0x5a, 0x91, 0xc8, 0x79, 0x93, 0xb5, 0x3f, 0x18,
	0x34, 0x4a, 0x63, 0x46, 0x2b, 0x69, 0x08, 0x2f, 0xa1, 0x36, 0x5f, 0xb7, 0x4c, 0xc8, 0x22, 0x1e,
	0xef, 0x75, 0x4f, 0x36, 0x03, 0xac, 0xb9, 0x52, 0x97, 0x74, 0xeb, 0x06, 0x76, 0x8b, 0xa6, 0xf3,
	0xeb, 0xbe, 0xfe, 0x02, 0x81, 0xf0, 0x35, 0x1e, 0x43, 0x35, 0xa7, 0x97, 0xe7, 0x99, 0xf5, 0xe9,
	0x98, 0x28, 0x14, 0x36, 0x81, 0x6b, 0x65, 0x7c, 0xb4, 0x40, 0xb8, 0xb2, 0xfb, 0xce, 0x80, 0x3f,
	0xdc, 0x0d, 0xf1, 0x0a, 0x1a, 0xd7, 0x4b, 0x9b, 0x25, 0x13, 0x5b, 0xec, 0x35, 0x78, 0xb0, 0xe5,
	0x98, 0xad, 0xc3, 0x6d, 0x06, 0xb1, 0x07, 0x47, 0xbf, 0xa6, 0x47, 0x36, 0xa3, 0x64, 0xf1, 0x87,
	0x1d, 0x31, 0x7b, 0xaa, 0xfa, 0xc7, 0x3e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x39, 0xa8,
	0x38, 0xf9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NLPClient is the client API for NLP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NLPClient interface {
	ExtractKeywords(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*KeywordResponse, error)
	ExtractKeywordsStream(ctx context.Context, opts ...grpc.CallOption) (NLP_ExtractKeywordsStreamClient, error)
}

type nLPClient struct {
	cc grpc.ClientConnInterface
}

func NewNLPClient(cc grpc.ClientConnInterface) NLPClient {
	return &nLPClient{cc}
}

func (c *nLPClient) ExtractKeywords(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*KeywordResponse, error) {
	out := new(KeywordResponse)
	err := c.cc.Invoke(ctx, "/nlp.NLP/ExtractKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPClient) ExtractKeywordsStream(ctx context.Context, opts ...grpc.CallOption) (NLP_ExtractKeywordsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NLP_serviceDesc.Streams[0], "/nlp.NLP/ExtractKeywordsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nLPExtractKeywordsStreamClient{stream}
	return x, nil
}

type NLP_ExtractKeywordsStreamClient interface {
	Send(*KeywordRequest) error
	CloseAndRecv() (*KeywordResponse, error)
	grpc.ClientStream
}

type nLPExtractKeywordsStreamClient struct {
	grpc.ClientStream
}

func (x *nLPExtractKeywordsStreamClient) Send(m *KeywordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nLPExtractKeywordsStreamClient) CloseAndRecv() (*KeywordResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(KeywordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NLPServer is the server API for NLP service.
type NLPServer interface {
	ExtractKeywords(context.Context, *KeywordRequest) (*KeywordResponse, error)
	ExtractKeywordsStream(NLP_ExtractKeywordsStreamServer) error
}

// UnimplementedNLPServer can be embedded to have forward compatible implementations.
type UnimplementedNLPServer struct {
}

func (*UnimplementedNLPServer) ExtractKeywords(ctx context.Context, req *KeywordRequest) (*KeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractKeywords not implemented")
}
func (*UnimplementedNLPServer) ExtractKeywordsStream(srv NLP_ExtractKeywordsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExtractKeywordsStream not implemented")
}

func RegisterNLPServer(s *grpc.Server, srv NLPServer) {
	s.RegisterService(&_NLP_serviceDesc, srv)
}

func _NLP_ExtractKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPServer).ExtractKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlp.NLP/ExtractKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPServer).ExtractKeywords(ctx, req.(*KeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLP_ExtractKeywordsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NLPServer).ExtractKeywordsStream(&nLPExtractKeywordsStreamServer{stream})
}

type NLP_ExtractKeywordsStreamServer interface {
	SendAndClose(*KeywordResponse) error
	Recv() (*KeywordRequest, error)
	grpc.ServerStream
}

type nLPExtractKeywordsStreamServer struct {
	grpc.ServerStream
}

func (x *nLPExtractKeywordsStreamServer) SendAndClose(m *KeywordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nLPExtractKeywordsStreamServer) Recv() (*KeywordRequest, error) {
	m := new(KeywordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NLP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nlp.NLP",
	HandlerType: (*NLPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractKeywords",
			Handler:    _NLP_ExtractKeywords_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExtractKeywordsStream",
			Handler:       _NLP_ExtractKeywordsStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nlp.proto",
}
